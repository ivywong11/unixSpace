1.进程用task_struct结构体来表示
2.task_struct里面有一个files成员指向files_struct结构体
3.files_struct结构中有一个fd_array指针数组，维护了打开文件的信息，数组中的每一个元素对应file结构的指针,数组的下标就是open返回的fd


open系统调用->内核中对应函数sys_open
sys_open调用了do_sys_open

do_sys_open
	1.先调用getname将文件名从用户空间复制到内核空间,就是open函数传入的文件名
	2.接着调用get_unused_fd_flags获取一个未使用的文件描述符,就在files_struct中的fd_array数组中找一个没用过的，返回其下标
	3.接下来掉用do_filp_open函数，构造一个file结构，并初始化里面成员!!!最重要的是将file里面的f_op成员，指向设备对应的驱动程序的操作方法集合的file_operations,里面的open函数指针可以调用驱动中实现的特定于设备的打开函数，也就是后面我们自己实现的驱动程序中的open方法
	4.最后调用fd_install,用前面得到的文件描述符，访问fd_array数组，将下标对应的元素指向新构造的file结构

这里第三步分析:
	do_filp_open调用path_openat来进行实际的打开操作
		1.path_openat调用get_empty_filp快速得到一个file结构
		2.再调用link_path_walk来处理文件路径除最后一个分量前面部分，例:如果要打开/dev/vser0,那么处理的就是/dev部分：包含根目录和dev目录
		3.接下来调用do_last,处理最后一个分量
			1.首先调用lookup_fast在RCU模式下尝试快速查找,如果第一次这么做会失败
			2.所以继续调用lookup_open
				1.lookup_open先调用lookup_dcache在目录高速缓存查找,第一次这么做，也会失败
				2.失败后继续调用lookup_real,在磁盘上找最后一个分量对应的节点
					如果是ext2文件系统
					1.调用ext2_lookup得到indoe编号
					2.ext2_lookup又会调用ext2_iget从磁盘上获取节点信息,对字符设备来说，最重要的就是获取到设备号，和设备类型，填充到内存中的inode
	通过判断文件类型，将indoe中的f_op指针指向def_chr_fops，里面的open函数指向chrdev_open函数。这个函数 1.通过设备号找到内核中添加的字符设备的cdev,cdev在cdev_map中，所以驱动程序在初始化的时候要将和设备号关联的cdev添加到cdev_map中，而cdev中关联了操作方法的集合，就是前面说的file的f_op指向，然后完成打开操作



